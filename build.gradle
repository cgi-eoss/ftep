import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

group 'com.cgi.eoss.f-tep'
version '1.0.0-SNAPSHOT'

// This pattern allows us to override the URLs from init.gradle or gradle.properties
ext.mavenCentralUrl = project.hasProperty('mavenCentralUrl') ? mavenCentralUrl : 'https://jcenter.bintray.com'
ext.mavenGeosolutionsUrl = project.hasProperty('mavenGeosolutionsUrl') ? mavenGeosolutionsUrl : 'http://maven.geo-solutions.it'
ext.mavenOsgeoUrl = project.hasProperty('mavenOsgeoUrl') ? mavenOsgeoUrl : 'http://download.osgeo.org/webdav/geotools'
ext.npmUrl = project.hasProperty('npmUrl') ? npmUrl : 'https://registry.npmjs.org'
ext.gradlePluginPortalUrl = project.hasProperty('gradlePluginPortalUrl') ? gradlePluginPortalUrl : 'https://plugins.gradle.org/m2'

allprojects {
    buildscript {
        repositories {
            maven { url gradlePluginPortalUrl }
        }
    }

    repositories {
        maven { url mavenCentralUrl }
        maven { url mavenGeosolutionsUrl }
        maven { url mavenOsgeoUrl }
    }

    buildDir = 'target'

    plugins.withType(JavaPlugin) {
        sourceCompatibility = 1.8
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom 'org.springframework:spring-framework-bom:4.3.9.RELEASE'
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR1'
            mavenBom 'org.springframework.data:spring-data-releasetrain:Ingalls-SR4'
            mavenBom 'org.springframework.security:spring-security-bom:4.2.3.RELEASE'
        }

        dependencies {
            dependency 'commons-io:commons-io:2.5'
            dependency 'commons-net:commons-net:3.6'
            dependencySet(group: 'com.fasterxml.jackson.core', version: '2.8.8') {
                entry 'jackson-annotations'
                entry 'jackson-core'
                entry 'jackson-databind'
            }
            dependencySet(group: 'com.fasterxml.jackson.dataformat', version: '2.8.8') {
                entry 'jackson-dataformat-xml'
                entry 'jackson-dataformat-yaml'
            }
            dependencySet(group: 'com.fasterxml.jackson.datatype', version: '2.8.8') {
                entry 'jackson-datatype-guava'
                entry 'jackson-datatype-hibernate5'
                entry 'jackson-datatype-jdk8'
                entry 'jackson-datatype-jsr310'
            }
            dependency 'com.github.docker-java:docker-java:3.0.10'
            dependency 'com.google.code.findbugs:jsr305:3.0.1'
            dependency 'com.google.guava:guava:22.0'
            dependency 'com.google.jimfs:jimfs:1.1'
            dependency 'com.google.protobuf:protoc:3.3.0'
            dependency 'com.hierynomus:sshj:0.21.1'
            dependency 'com.jayway.jsonpath:json-path:2.3.0'
            dependency 'com.lmax:disruptor:3.3.6'
            dependencySet(group: 'com.querydsl', version: '4.1.4') {
                entry 'querydsl-apt'
                entry 'querydsl-core'
                entry 'querydsl-jpa'
            }
            dependencySet(group: 'com.squareup.okhttp3', version: '3.8.1') {
                entry 'logging-interceptor'
                entry 'mockwebserver'
                entry 'okhttp'
            }
            dependency 'com.zaxxer:HikariCP:2.6.3'
            dependency 'de.grundid.opendatalab:geojson-jackson:1.8'
            dependencySet(group: 'info.cukes', version: '1.2.5') {
                entry 'cucumber-java8'
                entry 'cucumber-junit'
                entry 'cucumber-picocontainer'
            }
            dependencySet(group: 'io.grpc', version: '1.4.0') {
                entry 'grpc-netty'
                entry 'grpc-protobuf'
                entry 'grpc-stub'
                entry 'protoc-gen-grpc-java'
            }
            dependency 'io.netty:netty-tcnative-boringssl-static:2.0.5.Final'
            dependency 'it.geosolutions:geoserver-manager:1.7.0'
            dependency 'javax.cache:cache-api:1.0.0'
            dependency 'javax.servlet:javax.servlet-api:3.1.0'
            dependency 'junit:junit:4.12'
            dependency 'org.apache.commons:commons-lang3:3.6'
            dependency 'org.apache.commons:commons-text:1.1'
            dependency 'org.apache.logging.log4j:log4j-jul:2.7'
            dependency 'org.aspectj:aspectjweaver:1.8.10'
            dependency 'org.awaitility:awaitility:2.0.0'
            dependency 'org.codehaus.woodstox:woodstox-core-asl:4.4.1'
            dependency 'org.ehcache:ehcache:3.3.1'
            dependency 'org.flywaydb:flyway-core:4.2.0'
            dependency 'org.freemarker:freemarker:2.3.26-incubating'
            dependencySet(group: 'org.geotools', version: '17.1') {
                // project(':third-party/java/jai_core') must be manually included
                entry('gt-main') { exclude 'javax.media:jai_core' }
                entry('gt-geojson') { exclude 'javax.media:jai_core' }
                entry('gt-geometry') { exclude 'javax.media:jai_core' }
            }
            dependency 'org.graylog2.log4j2:log4j2-gelf:1.3.1'
            dependency 'org.hamcrest:hamcrest-junit:2.0.0.0'
            dependencySet(group: 'org.hibernate', version: '5.2.10.Final') {
                entry 'hibernate-core'
                entry 'hibernate-entitymanager'
            }
            dependency 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
            dependency 'org.hsqldb:hsqldb:2.4.0'
            dependency 'org.jooq:jool:0.9.12'
            dependency 'org.lognet:grpc-spring-boot-starter:2.0.4'
            dependency 'org.mockftpserver:MockFtpServer:2.7.1'
            dependency 'org.mockito:mockito-core:2.8.47'
            dependency 'org.pacesys:openstack4j-core:3.0.4'
            dependency 'org.pacesys.openstack4j.connectors:openstack4j-okhttp:3.0.4'
            dependency 'org.postgresql:postgresql:42.1.1'
            dependency 'org.projectlombok:lombok:1.16.16'
            dependency 'org.seleniumhq.selenium:selenium-java:3.4.0'
            dependencySet(group: 'org.springframework.boot', version: '1.5.4.RELEASE') {
                entry 'spring-boot'
                entry 'spring-boot-autoconfigure'
                entry 'spring-boot-configuration-processor'
                entry('spring-boot-starter') { exclude 'org.springframework.boot:spring-boot-starter-logging' }
                entry 'spring-boot-starter-actuator'
                entry 'spring-boot-starter-cache'
                entry 'spring-boot-starter-data-rest'
                entry 'spring-boot-starter-log4j2'
                entry 'spring-boot-starter-test'
                entry 'spring-boot-starter-undertow'
                entry('spring-boot-starter-web') { exclude 'org.springframework.boot:spring-boot-starter-tomcat' }
            }
            dependency 'org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE'
            dependencySet(group: 'org.testcontainers', version: '1.3.1') {
                entry 'selenium'
                entry 'testcontainers'
            }
        }
    }
}

subprojects {
    afterEvaluate { project ->
        if (!project.sonarqube.skipProject) {
            sonarqube {
                properties {
                    property 'sonar.jacoco.reportPaths', "${project.buildDir}/jacoco/test.exec, ${rootProject.buildDir}/jacoco/aggregateCoverage.exec"
                }
            }
        }
    }
}

def depVersions = [
        // Build plugin versions
        clientDependenciesPlugin     : '1.4.0',
        dependencyManagementPlugin   : '1.0.3.RELEASE',
        osDetectorPlugin             : '1.4.0',
        osPackagePlugin              : '4.4.0',
        protobufPlugin               : '0.8.1',
        querydslPlugin               : '1.0.9',
        shadowPlugin                 : '2.0.1',
        shadowLog4j2TransformerPlugin: '2.1.0',
        springBootPlugin             : '1.5.4.RELEASE'
]

ext.pl = [
        clientDependencies     : 'gradle.plugin.com.craigburke.gradle:client-dependencies:' + depVersions.clientDependenciesPlugin,
        dependencyManagement   : 'io.spring.gradle:dependency-management-plugin:' + depVersions.dependencyManagementPlugin,
        osPackage              : 'com.netflix.nebula:gradle-ospackage-plugin:' + depVersions.osPackagePlugin,
        protobuf               : 'com.google.protobuf:protobuf-gradle-plugin:' + depVersions.protobufPlugin,
        shadow                 : 'com.github.jengelman.gradle.plugins:shadow:' + depVersions.shadowPlugin,
        shadowLog4j2Transformer: 'de.sebastianboegl.gradle.plugins:shadow-log4j-transformer:' + depVersions.shadowLog4j2TransformerPlugin,
        springBoot             : 'org.springframework.boot:spring-boot-gradle-plugin:' + depVersions.springBootPlugin,
        osDetector             : 'com.google.gradle:osdetector-gradle-plugin:' + depVersions.osDetectorPlugin,
        querydsl               : 'gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:' + depVersions.querydslPlugin
]

buildscript {
    repositories {
        maven {
            url project.hasProperty('gradlePluginPortalUrl') ? gradlePluginPortalUrl : 'https://plugins.gradle.org/m2'
        }
    }
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
    }
}

apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'com.github.ben-manes.versions'

ext.snapshotRpmQualifier = System.getenv("BUILD_NUMBER") == null ? LocalDateTime.now().format(DateTimeFormatter.ofPattern('yyyyMMddHHmmss')) : System.getenv("BUILD_NUMBER")

def getRpmVersion(version) {
    return [
            version: version.endsWith('-SNAPSHOT') ? version.toString().split('-')[0] : version,
            release: version.endsWith('-SNAPSHOT') ? "SNAPSHOT${snapshotRpmQualifier}" : '1'
    ]
}

task aggregateCoverage(type: JacocoMerge) {
    def jacocoReports = []
    doFirst {
        subprojects.each { p ->
            def coverageFileLocation = "$p.buildDir/jacoco/test.exec"
            if (new File(coverageFileLocation).exists()) {
                jacocoReports.add(file(coverageFileLocation))
            }
        }
    }
    executionData = files(jacocoReports)
}

if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }
}
