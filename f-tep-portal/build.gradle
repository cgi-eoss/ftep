buildscript {
    dependencies {
        classpath "com.netflix.nebula:gradle-ospackage-plugin:4.1.0"
        classpath "gradle.plugin.com.craigburke.gradle:client-dependencies:1.3.1"
        classpath "com.eriwen:gradle-js-plugin:2.14.1"
    }
}

group 'com.cgi.eoss.f-tep'
version '0.2.1'

apply plugin: 'java'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.craigburke.client-dependencies'
apply plugin: 'com.eriwen.gradle.js'

jar {
    enabled false
}

clientDependencies {
    installDir = "${projectDir}/src/main/resources/app/scripts/vendor"

    // Use a custom repo to allow local override of npmUrl
    registry 'npmR', type: 'npm', url: npmUrl

    npmR {
        'angular'('1.4.14')
        'angular-animate'('1.4.14')
        'angular-aria'('1.4.14')
        'angular-cookies'('1.4.14')
        'angular-drag-and-drop-lists'('1.4.0')
        'angular-material'('1.1.1')
        'angular-messages'('1.4.14')
        'angular-moment'('1.0.1')
        'angular-openlayers-directive'('1.15.2')
        'angular-paging'('2.2.2')
        'angular-resource'('1.4.14')
        'angular-route'('1.4.14')
        'angular-sanitize'('1.4.14')
        'angular-touch'('1.4.14')
        'angular-ui-bootstrap'('2.3.0')
        'angular-ui-grid'('3.2.9')
        'angular-ui-layout'('1.4.2')
        'angularjs-slider'('5.8.7')
        'bootstrap'('3.2.0')
        'clipboard-js'('0.3.1')
        'jquery'('3.1.1')
        'moment'('2.17.0')
        'ng-scrollbar'('0.0.8')
        'requirejs'('2.3.2')
        'requirejs-domready'('2.0.3', into: 'domready')
    }
}

javascript.source {
    ftep {
        js {
            srcDir "${projectDir}/src/main/resources/app/scripts"
            include "**/*.js"
            exclude "vendor/**/*"
            exclude "zoo-client/**/*"
        }
    }
    vendor {
        js {
            srcDir "${projectDir}/src/main/resources/app/scripts"
            include "vendor/**/*.js"
            include "zoo-client/**/*.js"
        }
    }
}

String finalJs = "${buildDir}/requireJs/all.js"

// Concatenate all required JS resources for the main app
requireJs {
    source = [javascript.source.ftep.js.files, javascript.source.vendor.js.files]
    dest = file(finalJs)
    requirejs.buildprofile = file("${projectDir}/src/main/requireJs/build.js")
    requirejs.impl = file("${projectDir}/src/main/resources/app/scripts/vendor/requirejs/bin/r.js")

    dependsOn clientInstall
}

// TODO Test and enable minification, and change finalJs
minifyJs {
    source = "${buildDir}/requireJs/all.js"
    dest = "${buildDir}/requireJs/all.min.js"
    closure {
        compilerOptions = [
                'languageIn': 'ECMASCRIPT5'
        ]
    }

    dependsOn requireJs
}

// Copy all non-JS resources to the staging area
task copyApp(type: Copy) {
    from "${projectDir}/src/main/resources/app"
    into "${buildDir}/staging"

    exclude 'scripts/**/*.js'
    exclude 'index.html'
    includeEmptyDirs = false

    dependsOn clientInstall
}

task copyJs(type: Copy) {
    from finalJs
    into "${buildDir}/staging/scripts"
    rename { return "app.js" }

    dependsOn requireJs
}

task copyConfig(type: Copy) {
    from "${projectDir}/src/main/resources/app/scripts/ftepConfig.js"
    into "${buildDir}/staging/scripts"
    dependsOn copyApp
}

// Copy the index.html file and replace the require.js loader with the concatenated & minified JS resource
task copyIndex(type: Copy) {
    from "${projectDir}/src/main/resources/app"
    into "${buildDir}/staging"
    include 'index.html'

    // Force this task to re-run, to ensure version is always up to date
    outputs.upToDateWhen { false }

    filter { line ->
        line.replace('<script data-main="scripts/main" src="scripts/vendor/requirejs/require.js"></script>',
                '<script src="scripts/app.js"></script>')
        line.replace('<meta id="version" name="version" content="dev">',
                "<meta id=\"version\" name=\"version\" content=\"${version}\">")
    }

    dependsOn copyApp, copyJs, copyConfig
}

buildRpm.dependsOn tasks.withType(Copy)
buildDeb.dependsOn tasks.withType(Copy)

ospackage {
    packageName 'f-tep-portal'
    version getRpmVersion(project.version).version
    release getRpmVersion(project.version).release
    arch NOARCH
    os LINUX

    into '/var/www/html/f-tep'

    from("${buildDir}/staging") {
        user 'root'
        include '**'
        exclude 'scripts/ftepConfig.js'
    }

    from("${buildDir}/staging") {
        user 'root'
        fileType CONFIG | NOREPLACE
        include 'scripts/ftepConfig.js'
    }
}

artifacts {
    archives buildRpm
}

sonarqube {
    properties {
        property "sonar.exclusions", "src/main/resources/app/scripts/vendor/**/*,src/main/resources/app/scripts/zoo-client/**/*"
    }
}
