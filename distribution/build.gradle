import java.nio.file.Files
import java.nio.file.Paths

group 'com.cgi.eoss.f-tep'
version '1.0.0-SNAPSHOT'

apply plugin: 'base'

configurations {
    packages
    puppetModules
}

dependencies {
    packages project(path: ':f-tep-drupalmodules', configuration: 'pkg')
    packages project(path: ':f-tep-portal', configuration: 'pkg')
    packages project(path: ':f-tep-server', configuration: 'pkg')
    packages project(path: ':f-tep-serviceregistry', configuration: 'pkg')
    packages project(path: ':f-tep-worker', configuration: 'pkg')
    packages project(path: ':f-tep-zoomanager', configuration: 'pkg')
    packages project(path: ':third-party/pkg', configuration: 'pkg')
    packages project(path: ':third-party/resto', configuration: 'pkg')

    puppetModules project(path: ':third-party/puppet', configuration: 'allModules')
}

task distPackages(type: Sync) {
    dependsOn configurations.packages

    into "${buildDir}/repo"

    into('6/local/noarch/RPMS') {
        from configurations.packages
        include '**/*.noarch.rpm'
    }
    into('6/local/x86_64/RPMS') {
        from configurations.packages
        include '**/*.x86_64.rpm'
    }
}

task createrepo(type: Exec) {
    dependsOn distPackages
    // TODO More rigorous checking for createrepo binary
    onlyIf { Files.isExecutable(Paths.get('/usr/bin/createrepo')) }

    def repoDir = Paths.get("${buildDir}/yumrepo")

    executable '/usr/bin/createrepo'
    args "--outputdir=${repoDir}", "${buildDir}/repo"

    inputs.files distPackages.outputs.files
    outputs.files fileTree(repoDir.toString())

    doFirst {
        Files.createDirectories(repoDir)
    }
}

task distPuppet(type: Sync) {
    dependsOn configurations.puppetModules

    into "${buildDir}/puppet"
    from 'puppet'

    into('modules') {
        from {
            configurations.puppetModules.collect { tarTree(it) }
        }
    }
}

task buildDist(type: Sync) {
    into "${rootDir}/.dist"

    into('repo') {
        from createrepo
        from distPackages
    }
    into('puppet') {
        from distPuppet
    }
}

sonarqube {
    skipProject = true
}
