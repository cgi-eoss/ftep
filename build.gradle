import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

group 'com.cgi.eoss.f-tep'
version '0.6.0-SNAPSHOT'

// This pattern allows us to override the URLs from init.gradle or gradle.properties
ext.mavenCentralUrl = project.hasProperty('mavenCentralUrl') ? mavenCentralUrl : 'https://jcenter.bintray.com'
ext.mavenGeosolutionsUrl = project.hasProperty('mavenGeosolutionsUrl') ? mavenGeosolutionsUrl : 'http://maven.geo-solutions.it'
ext.mavenOsgeoUrl = project.hasProperty('mavenOsgeoUrl') ? mavenOsgeoUrl : 'http://download.osgeo.org/webdav/geotools'
ext.npmUrl = project.hasProperty('npmUrl') ? npmUrl : 'https://registry.npmjs.org'
ext.gradlePluginPortalUrl = project.hasProperty('gradlePluginPortalUrl') ? gradlePluginPortalUrl : 'https://plugins.gradle.org/m2'

allprojects {
    buildscript {
        repositories {
            maven { url gradlePluginPortalUrl }
        }
    }

    repositories {
        maven { url mavenCentralUrl }
        maven { url mavenGeosolutionsUrl }
        maven { url mavenOsgeoUrl }
    }

    buildDir = 'target'

    plugins.withType(JavaPlugin) {
        sourceCompatibility = 1.8
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        dependencies {
            dependency 'commons-io:commons-io:2.5'
            dependency 'commons-net:commons-net:3.6'
            dependencySet(group: 'com.fasterxml.jackson.core', version: '2.8.7') {
                entry 'jackson-core'
                entry 'jackson-databind'
            }
            dependencySet(group: 'com.fasterxml.jackson.dataformat', version: '2.8.7') {
                entry 'jackson-dataformat-yaml'
            }
            dependencySet(group: 'com.fasterxml.jackson.datatype', version: '2.8.7') {
                entry 'jackson-datatype-guava'
            }
            dependency 'com.github.docker-java:docker-java:3.0.8'
            dependency 'com.github.jasminb:jsonapi-converter:0.3'
            dependency 'com.google.code.findbugs:jsr305:3.0.1'
            dependency 'com.google.code.gson:gson:2.7'
            dependency 'com.google.guava:guava:21.0'
            dependency 'com.google.jimfs:jimfs:1.1'
            dependency 'com.google.protobuf:protoc:3.2.0'
            dependency 'com.jayway.jsonpath:json-path:2.2.0'
            dependency 'com.lmax:disruptor:3.3.6'
            dependencySet(group: 'com.querydsl', version: '4.1.4') {
                entry 'querydsl-apt'
                entry 'querydsl-jpa'
            }
            dependencySet(group: 'com.squareup.okhttp3', version: '3.6.0') {
                entry 'mockwebserver'
                entry 'okhttp'
            }
            dependency 'com.zaxxer:HikariCP:2.6.0'
            dependency 'de.grundid.opendatalab:geojson-jackson:1.8'
            dependencySet(group: 'info.cukes', version: '1.2.5') {
                entry 'cucumber-java8'
                entry 'cucumber-junit'
                entry 'cucumber-picocontainer'
            }
            dependencySet(group: 'io.grpc', version: '1.1.2') {
                entry 'grpc-netty'
                entry 'grpc-protobuf'
                entry 'grpc-stub'
                entry 'protoc-gen-grpc-java'
            }
            dependency 'io.netty:netty-tcnative-boringssl-static:1.1.33.Fork26'
            dependency 'it.geosolutions:geoserver-manager:1.7.0'
            dependency 'javax.cache:cache-api:1.0.0'
            dependency 'javax.servlet:javax.servlet-api:3.1.0'
            dependency 'junit:junit:4.12'
            dependency 'org.apache.commons:commons-lang3:3.5'
            dependency 'org.apache.httpcomponents:httpclient:4.5.3'
            dependency 'org.aspectj:aspectjweaver:1.8.10'
            dependency 'org.awaitility:awaitility:2.0.0'
            dependency 'org.ehcache:ehcache:3.2.0'
            dependency 'org.flywaydb:flyway-core:4.1.0'
            dependency 'org.freemarker:freemarker:2.3.25-incubating'
            dependencySet(group: 'org.geotools', version: '16.2') {
                // project(':third-party/java/jai_core') must be manually included
                entry('gt-main') { exclude 'javax.media:jai_core' }
                entry('gt-geojson') { exclude 'javax.media:jai_core' }
                entry('gt-geometry') { exclude 'javax.media:jai_core' }
            }
            dependency 'org.graylog2.log4j2:log4j2-gelf:1.3.1'
            dependency 'org.hamcrest:hamcrest-junit:2.0.0.0'
            dependencySet(group: 'org.hibernate', version: '5.2.8.Final') {
                entry 'hibernate-core'
                entry 'hibernate-entitymanager'
            }
            dependency 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
            dependency 'org.hsqldb:hsqldb:2.3.4'
            dependency 'org.jooq:jool:0.9.12'
            dependency 'org.lognet:grpc-spring-boot-starter:2.0.0'
            dependency 'org.mockftpserver:MockFtpServer:2.7.1'
            dependency 'org.mockito:mockito-core:2.7.11'
            dependency 'org.postgresql:postgresql:42.0.0'
            dependency 'org.projectlombok:lombok:1.16.14'
            dependency 'org.seleniumhq.selenium:selenium-java:3.0.1'
            dependencySet(group: 'org.springframework', version: '4.3.7.RELEASE') {
                entry 'spring-context'
                entry 'spring-core'
                entry 'spring-orm'
                entry 'spring-test'
                entry 'spring-tx'
                entry 'spring-web'
            }
            dependencySet(group: 'org.springframework.boot', version: '1.5.2.RELEASE') {
                entry 'spring-boot'
                entry 'spring-boot-autoconfigure'
                entry('spring-boot-starter') { exclude 'org.springframework.boot:spring-boot-starter-logging' }
                entry 'spring-boot-starter-actuator'
                entry 'spring-boot-starter-cache'
                entry 'spring-boot-starter-data-rest'
                entry 'spring-boot-starter-log4j2'
                entry 'spring-boot-starter-test'
                entry 'spring-boot-starter-undertow'
                entry('spring-boot-starter-web') { exclude 'org.springframework.boot:spring-boot-starter-tomcat' }
            }
            dependencySet(group: 'org.springframework.data', version: '1.11.1.RELEASE') {
                entry 'spring-data-jpa'
            }
            dependencySet(group: 'org.springframework.data', version: '2.6.1.RELEASE') {
                entry 'spring-data-rest-hal-browser'
                entry 'spring-data-rest-webmv'
            }
            dependencySet(group: 'org.springframework.security', version: '4.2.2.RELEASE') {
                entry 'spring-security-acl'
                entry 'spring-security-config'
                entry 'spring-security-core'
                entry 'spring-security-web'
            }
            dependencySet(group: 'org.testcontainers', version: '1.1.9') {
                entry 'selenium'
                entry 'testcontainers'
            }
        }
    }
}

def depVersions = [
        // Build plugin versions
        clientDependenciesPlugin  : '1.3.2',
        dependencyManagementPlugin: '1.0.0.RELEASE',
        jsPlugin                  : '2.14.1',
        osDetectorPlugin          : '1.4.0',
        osPackagePlugin           : '4.4.0',
        protobufPlugin            : '0.8.1',
        shadowPlugin              : '1.2.4',
        springBootPlugin          : '1.5.2.RELEASE'
]

ext.pl = [
        clientDependencies  : 'gradle.plugin.com.craigburke.gradle:client-dependencies:' + depVersions.clientDependenciesPlugin,
        dependencyManagement: 'io.spring.gradle:dependency-management-plugin:' + depVersions.dependencyManagementPlugin,
        js                  : 'com.eriwen:gradle-js-plugin:' + depVersions.jsPlugin,
        osPackage           : 'com.netflix.nebula:gradle-ospackage-plugin:' + depVersions.osPackagePlugin,
        protobuf            : 'com.google.protobuf:protobuf-gradle-plugin:' + depVersions.protobufPlugin,
        shadow              : 'com.github.jengelman.gradle.plugins:shadow:' + depVersions.shadowPlugin,
        springBoot          : 'org.springframework.boot:spring-boot-gradle-plugin:' + depVersions.springBootPlugin,
        osDetector          : 'com.google.gradle:osdetector-gradle-plugin:' + depVersions.osDetectorPlugin
]

buildscript {
    repositories {
        maven {
            url project.hasProperty('gradlePluginPortalUrl') ? gradlePluginPortalUrl : 'https://plugins.gradle.org/m2'
        }
    }
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE'
    }
}

apply plugin: 'org.sonarqube'
apply plugin: 'com.github.ben-manes.versions'

ext.snapshotRpmQualifier = System.getenv("BUILD_NUMBER") == null ? LocalDateTime.now().format(DateTimeFormatter.ofPattern('yyyyMMddHHmmss')) : System.getenv("BUILD_NUMBER")

def getRpmVersion(version) {
    return [
            version: version.endsWith('-SNAPSHOT') ? version.toString().split('-')[0] : version,
            release: version.endsWith('-SNAPSHOT') ? "SNAPSHOT${snapshotRpmQualifier}" : '1'
    ]
}
