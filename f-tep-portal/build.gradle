buildscript {
    dependencies {
        classpath pl.osPackage
        classpath pl.clientDependencies
    }
}

group 'com.cgi.eoss.f-tep'
version '1.0.0-SNAPSHOT'

apply plugin: 'java-base'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.craigburke.client-dependencies'

sourceSets {
    main {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = ["src/main/resources", "src/main/requireJs"]
        }
    }
    test {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

clientDependencies {
    installDir = "${projectDir}/src/main/resources/app/scripts/vendor"

    // Use a custom repo to allow local override of npmUrl
    registry 'npmR', type: 'npm', url: npmUrl

    npmR {
        'angular'('1.4.14')
        'angular-animate'('1.4.14')
        'angular-aria'('1.4.14')
        'angular-cookies'('1.4.14')
        'angular-drag-and-drop-lists'('1.4.0')
        'angular-material'('1.1.1')
        'angular-messages'('1.4.14')
        'angular-moment'('1.0.1')
        'angular-openlayers-directive'('1.15.2')
        'angular-paging'('2.2.2')
        'angular-resource'('1.4.14')
        'angular-route'('1.4.14')
        'angular-sanitize'('1.4.14')
        'angular-touch'('1.4.14')
        'angular-ui-bootstrap'('2.3.0')
        'angular-ui-codemirror'('0.3.0')
        'angular-ui-grid'('4.0.4')
        'angular-ui-layout'('1.4.2')
        'bootstrap'('3.2.0')
        'clipboard-js'('0.3.1')
        'codemirror'('5.25.2')
        'jquery'('3.1.1')
        'moment'('2.17.0')
        'requirejs'('2.3.3')
        'requirejs-domready'('2.0.3', into: 'domready')
        'ng-file-upload'('12.2.13')
        'traverson'('6.0.1')
        'traverson-angular'('6.0.0')
        'traverson-hal'('6.0.0')
        'x2js'('3.1.1')
    }
}

dependencies {
    compile 'com.google.javascript:closure-compiler:v20170521'
}

task requireJs(type: RequireJsTask) {
    classpath = sourceSets.main.compileClasspath
    rJs = file("${projectDir}/src/main/resources/app/scripts/vendor/requirejs/bin/r.js")
    buildJs = file("${projectDir}/src/main/requireJs/build.js")
    sourceJs = fileTree("${projectDir}/src/main/resources/app/scripts") {
        include '**/*.js'
    }
    appJsFile = "app.js"
    outputDir = file("${buildDir}/requireJs")

    dependsOn clientInstall
}

@CacheableTask
class RequireJsTask extends DefaultTask {
    @Input
    File jjs = project.file("${System.properties['java.home']}/bin/jjs")

    @Classpath @InputFiles
    Iterable<File> classpath

    @InputFile
    File rJs

    @InputFile
    File buildJs

    @InputFiles
    Iterable<File> sourceJs

    @Input
    String appJsFile

    @OutputDirectory
    File outputDir

    @TaskAction
    def requireJs() {
        project.exec {
            standardOutput new FileOutputStream("${project.buildDir}/requireJs.log")
            errorOutput new FileOutputStream("${project.buildDir}/requireJs.err")
            commandLine jjs, "-scripting",
                    "-cp", classpath.asPath,
                    rJs, "--",
                    "-o", buildJs,
                    "out=${outputDir}/${appJsFile}"
        }
    }
}

task stageApp(type: Sync) {
    into "${buildDir}/staging"
    includeEmptyDirs = false

    from("${projectDir}/src/main/resources/app") {
        exclude 'scripts/**/*.js'
        exclude 'index.html'
    }
    from("${projectDir}/src/main/resources/app/scripts/vendor/codemirror") {
        into 'scripts/vendor/codemirror'
        include '**/*'
    }
    from(requireJs) {
        into 'scripts'
        include '**/*'
    }
    from("${projectDir}/src/main/resources/app/scripts/ftepConfig.js") {
        into 'scripts'
    }
    from("${projectDir}/src/main/resources/app") {
        include 'index.html'

        filter { line ->
            line.replace('<script data-main="scripts/main" src="scripts/vendor/requirejs/require.js"></script>',
                    '<script src="scripts/app.js"></script>')
        }
        filter { line ->
            line.replace('<meta id="version" name="version" content="dev">',
                    "<meta id=\"version\" name=\"version\" content=\"${getBannerVersion()}\">")
        }
    }
}

String getBannerVersion() {
    return project.version.endsWith('-SNAPSHOT') ?
            "${getRpmVersion(project.version).version}-dev" :
            "${getRpmVersion(project.version).version}"
}

buildRpm.dependsOn stageApp
buildDeb.dependsOn stageApp

ospackage {
    packageName 'f-tep-portal'
    version getRpmVersion(project.version).version
    release getRpmVersion(project.version).release
    arch NOARCH
    os LINUX

    into '/var/www/html/f-tep'

    from("${buildDir}/staging") {
        user 'root'
        include '**'
        exclude 'scripts/ftepConfig.js'
    }

    from("${buildDir}/staging") {
        user 'root'
        fileType CONFIG | NOREPLACE
        include 'scripts/ftepConfig.js'
    }
}

configurations { pkg }
artifacts { pkg buildRpm }

sonarqube {
    properties {
        property "sonar.sources", "src/main/resources/app"
        property "sonar.exclusions", "src/main/resources/app/scripts/vendor/**/*"
    }
}

