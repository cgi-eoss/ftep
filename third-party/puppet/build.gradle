group 'com.cgi.eoss.f-tep'
version '0.1.0'

apply plugin: 'base'

configurations {
    moduleTars
    allModules
}

// Puppet modules to stage into ${buildDir}/modules and package into ${buildDir}/distributions
def puppetModules = [
        'cgieoss-ftep',
        // transitive deps
        'darin-zypprepo', // (v1.0.2)
        'datacentred-telegraf', // (v1.4.0)
        'elastic-elasticsearch', // (v5.1.0)
        'garethr-docker', // (v5.3.0)
        'golja-influxdb', // (v4.0.0)
        'graylog-graylog', // (v0.3.0)
        'maestrodev-wget', // (v1.7.3)
        'puppet-archive', // (v1.3.0)
        'puppet-grafana', // (v2.6.3)
        'puppet-php', // (v4.0.0)
        'puppet-selinux', // (v0.8.0)
        'puppet-yum', // (v1.0.0)
        'puppetlabs-apache', // (v1.11.0)
        'puppetlabs-apt', // (v2.3.0)
        'puppetlabs-concat', // (v2.2.0)
        'puppetlabs-inifile', // (v1.6.0)
        'puppetlabs-java', // (v1.6.0)
        'puppetlabs-mongodb', // (v0.17.0)
        'puppetlabs-postgresql', // (v4.9.0)
        'puppetlabs-stdlib', // (v4.16.0)
        'richardc-datacat', // (v0.6.2)
        'stahnma-epel', // (v1.2.2)
        'tohuwabohu-drupal', // (v3.0.0)
]

def moduleMetadata = [:]
puppetModules.each {
    moduleMetadata.put(it, new groovy.json.JsonSlurper().parse(file("${it}/metadata.json")))
}

tasks.addRule("Pattern: collectSources_<ID>") { String taskName ->
    if (taskName.startsWith("collectSources_")) {
        task(taskName, type: Sync) {
            def module = (taskName - 'collectSources_')

            def moduleShortName = moduleMetadata[module].name.split('[-/]')[1]
            def targetDir = "${buildDir}/modules/${moduleShortName}"

            def srcs = fileTree(module) {
                include '**/*'
                exclude '.*'
            }

            def checksumsFile = file("${projectDir}/${module}/checksums.json")
            if (!srcs.contains(checksumsFile)) {
                checksumsFile = file("${temporaryDir}/checksums.json")
                dependsOn genChecksumsTask(module, checksumsFile, srcs)
            }

            // Configure the copy task
            from srcs
            from checksumsFile
            into targetDir
        }
    }
}

tasks.addRule("Pattern: buildModule_<ID>") { String taskName ->
    if (taskName.startsWith("buildModule_")) {
        task(taskName, type: Tar) {
            def module = (taskName - 'buildModule_')

            def srcTask = tasks["collectSources_${module}"]
            dependsOn srcTask

            // Configure the tar task
            baseName = moduleMetadata[module].name.replaceAll('/', '-')
            version = moduleMetadata[module].version
            compression = Compression.GZIP
            extension = 'tar.gz'
            from srcTask
            into "${moduleMetadata[module].name.replaceAll('/', '-')}-${version}"
        }
    }
}

def genChecksumsTask(String module, File checksumsFile, FileTree srcs) {
    return tasks.create("genChecksums_${module}", SourceTask) {
        mustRunAfter clean

        source srcs
        outputs.dir checksumsFile.parent
        outputs.file checksumsFile

        doLast {
            TreeMap checksums = [:]
            srcs.visit { e ->
                if (!e.isDirectory) {
                    def hash = java.security.MessageDigest.getInstance('MD5').with {
                        e.file.eachByte(8192) { byte[] bfr, int len ->
                            update bfr, 0, len
                        }
                        it.digest()
                    }
                    checksums.put(e.relativePath.toString(), new BigInteger(1, hash).toString(16).padLeft(32, '0'))
                }
            }
            checksums.sort
            checksumsFile.parentFile.mkdirs()
            checksumsFile.write(groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(checksums)))
        }
    }
}

task allModulesTar(type: Tar) {
    baseName = 'allModules'
    compression = Compression.GZIP
    extension = 'tar.gz'

    puppetModules.each { module ->
        into(moduleMetadata[module].name.split('[-/]')[1]) {
            from tasks["collectSources_${module}"]
        }
    }
}

artifacts {
    allModules allModulesTar
    // Uncomment to add individual module .tar.gz files to the default build
    //puppetModules.each { module ->
    //    moduleTars tasks["buildModule_${module}"]
    //}
}

sonarqube {
    skipProject = true
}
