buildscript {
    dependencies {
        classpath pl.osPackage
        classpath pl.clientDependencies
        classpath pl.js
    }
}

group 'com.cgi.eoss.f-tep'
version '0.6.11'

apply plugin: 'java-base'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.craigburke.client-dependencies'
apply plugin: 'com.eriwen.gradle.js'

sourceSets {
    main {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = ["src/main/resources", "src/main/requireJs"]
        }
    }
    test {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

clientDependencies {
    installDir = "${projectDir}/src/main/resources/app/scripts/vendor"

    // Use a custom repo to allow local override of npmUrl
    registry 'npmR', type: 'npm', url: npmUrl

    npmR {
        'angular'('1.4.14')
        'angular-animate'('1.4.14')
        'angular-aria'('1.4.14')
        'angular-cookies'('1.4.14')
        'angular-drag-and-drop-lists'('1.4.0')
        'angular-material'('1.1.1')
        'angular-messages'('1.4.14')
        'angular-moment'('1.0.1')
        'angular-openlayers-directive'('1.15.2')
        'angular-paging'('2.2.2')
        'angular-resource'('1.4.14')
        'angular-route'('1.4.14')
        'angular-sanitize'('1.4.14')
        'angular-touch'('1.4.14')
        'angular-ui-bootstrap'('2.3.0')
        'angular-ui-codemirror'('0.3.0')
        'angular-ui-grid'('4.0.4')
        'angular-ui-layout'('1.4.2')
        'bootstrap'('3.2.0')
        'clipboard-js'('0.3.1')
        'codemirror'('5.25.2')
        'jquery'('3.1.1')
        'moment'('2.17.0')
        'requirejs'('2.3.3')
        'requirejs-domready'('2.0.3', into: 'domready')
        'ng-file-upload'('12.2.13')
        'traverson'('6.0.1')
        'traverson-angular'('6.0.0')
        'traverson-hal'('6.0.0')
        'x2js'('3.1.1')
    }
}

javascript.source {
    ftep {
        js {
            srcDir "${projectDir}/src/main/resources/app/scripts"
            include "**/*.js"
            exclude "vendor/**/*"
        }
    }
    vendor {
        js {
            srcDir "${projectDir}/src/main/resources/app/scripts"
            include "vendor/**/*.js"
        }
    }
}

String bigJs = "${buildDir}/requireJs/all.js"
String minJs = "${buildDir}/requireJs/all.min.js"

// Concatenate all required JS resources for the main app
requireJs {
    source = [javascript.source.ftep.js.files, javascript.source.vendor.js.files]
    dest = file(bigJs)
    requirejs.buildprofile = file("${projectDir}/src/main/requireJs/build.js")
    requirejs.impl = file("${projectDir}/src/main/resources/app/scripts/vendor/requirejs/bin/r.js")

    dependsOn clientInstall
}

minifyJs {
    source = bigJs
    dest = minJs
    closure {
        compilerOptions = [
                'languageIn': 'ECMASCRIPT5'
        ]
    }

    dependsOn requireJs
}

// Copy all non-JS resources to the staging area
task copyApp(type: Copy) {
    into "${buildDir}/staging"

    from("${projectDir}/src/main/resources/app") {
        exclude 'scripts/**/*.js'
        exclude 'index.html'
    }
    from("${projectDir}/src/main/resources/app/scripts/vendor/codemirror") {
        into "scripts/vendor/codemirror"
        include '**/*'
    }
    includeEmptyDirs = false

    dependsOn clientInstall
}

task copyJs(type: Copy) {
    from minifyJs
    into "${buildDir}/staging/scripts"
    rename { return "app.js" }

    dependsOn requireJs
}

task copyConfig(type: Copy) {
    from "${projectDir}/src/main/resources/app/scripts/ftepConfig.js"
    into "${buildDir}/staging/scripts"
    dependsOn copyApp
}

// Copy the index.html file and replace the require.js loader with the concatenated & minified JS resource
task copyIndex(type: Copy) {
    from "${projectDir}/src/main/resources/app"
    into "${buildDir}/staging"
    include 'index.html'

    filter { line ->
        line.replace('<script data-main="scripts/main" src="scripts/vendor/requirejs/require.js"></script>',
                '<script src="scripts/app.js"></script>')
    }
    filter { line ->
        line.replace('<meta id="version" name="version" content="dev">',
                "<meta id=\"version\" name=\"version\" content=\"${getBannerVersion()}\">")
    }

    dependsOn copyApp, copyJs, copyConfig
}

String getBannerVersion() {
    return project.version.endsWith('-SNAPSHOT') ?
            "${getRpmVersion(project.version).version}-dev" :
            "${getRpmVersion(project.version).version}"
}

buildRpm.dependsOn tasks.withType(Copy)
buildDeb.dependsOn tasks.withType(Copy)

ospackage {
    packageName 'f-tep-portal'
    version getRpmVersion(project.version).version
    release getRpmVersion(project.version).release
    arch NOARCH
    os LINUX

    into '/var/www/html/f-tep'

    from("${buildDir}/staging") {
        user 'root'
        include '**'
        exclude 'scripts/ftepConfig.js'
    }

    from("${buildDir}/staging") {
        user 'root'
        fileType CONFIG | NOREPLACE
        include 'scripts/ftepConfig.js'
    }
}

configurations { pkg }
artifacts { pkg buildRpm }

sonarqube {
    properties {
        property "sonar.sources", "src/main/resources/app"
        property "sonar.exclusions", "src/main/resources/app/scripts/vendor/**/*"
    }
}

